import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from scipy.stats import shapiro, kstest, norm, t, chi2, probplot
import plotly.express as px
from statsmodels.stats.proportion import proportion_confint
# from scipy.stats import binom # Remplac√© par statsmodels qui est plus complet

# Configuration de la page
st.set_page_config(layout="wide", page_title="üìä Analyse Statistique")

# --- Widget d√©plac√© en dehors de la fonction mise en cache ---
uploaded_file = st.sidebar.file_uploader(
    "üì§ Importer un fichier (CSV/Excel)",
    type=['csv', 'xlsx']
)

# Fonction pour charger les donn√©es (prend maintenant uploaded_file en argument)
@st.cache_data
def load_data(uploaded_file_obj):
    if uploaded_file_obj is not None:
        try:
            # Utiliser un nouveau nom de variable pour √©viter l'√©crasement
            file_name_ext = uploaded_file_obj.name
            if file_name_ext.endswith('.csv'):
                df_loaded = pd.read_csv(uploaded_file_obj) # Utiliser un nom diff√©rent
            else:
                df_loaded = pd.read_excel(uploaded_file_obj) # Utiliser un nom diff√©rent
            return df_loaded
        except Exception as e:
            st.error(f"Erreur lors du chargement du fichier: {e}")
            return None
    return None

# Fonction bootstrap (inchang√©e)
def bootstrap_ci(data, func, n_resamples=1000, conf_level=0.95):
    # S'assurer que les donn√©es sont un array numpy pour le bootstrap
    if isinstance(data, pd.Series):
        data = data.to_numpy()
    # G√©rer le cas o√π les donn√©es sont vides ou ont moins de 2 √©l√©ments pour var/std
    if len(data) < 1 or (func in [np.var, np.std] and len(data) < 2) :
         return (np.nan, np.nan)
    resamples = np.random.choice(data, size=(n_resamples, len(data)), replace=True)
    # Appliquer la fonction en g√©rant les lignes avec moins de 2 √©l√©ments pour var/std si n√©cessaire
    if func in [np.var, np.std] :
         estimates = np.array([func(resample, ddof=1) if len(resample) >= 2 else np.nan for resample in resamples])
         estimates = estimates[~np.isnan(estimates)] # Exclure les NaN
         if len(estimates) < 2 : return (np.nan, np.nan) # Pas assez de donn√©es valides pour l'intervalle
    else :
        estimates = np.apply_along_axis(func, 1, resamples)

    alpha = 1 - conf_level
    # G√©rer le cas o√π il n'y a pas assez d'estimations valides
    if len(estimates) == 0:
        return (np.nan, np.nan)
    return np.percentile(estimates, [100*alpha/2, 100*(1-alpha/2)])


# --- Flux d'ex√©cution principal ---

# Charger les donn√©es uniquement si un fichier est t√©l√©vers√©
if uploaded_file is not None:
    df = load_data(uploaded_file) # df est maintenant le dataframe charg√©

    # Continuer seulement si le chargement des donn√©es a r√©ussi
    if df is not None:
        st.sidebar.write(f"üîç {len(df)} observations, {len(df.columns)} variables")

        # Onglets principaux
        tab1, tab2 = st.tabs(["Variables Quantitatives", "Variables Qualitatives"])

        with tab1:
            # Partie Variables Quantitatives
            # S√©lection de la variable quantitative
            numeric_cols = df.select_dtypes(include=np.number).columns.tolist()
            if not numeric_cols:
                 # Ce header s'affiche seulement s'il n'y a pas de var. quantitatives
                st.header("Analyse des Variables Quantitatives")
                st.warning("Aucune variable quantitative trouv√©e dans les donn√©es.")
            else:
                selected_quant_col = st.selectbox("S√©lectionnez la variable quantitative", numeric_cols, key="quant_var_select")

                # --- Header dynamique ---
                st.header(f"Analyse de la Variable Quantitative : `{selected_quant_col}`")

                # Nettoyage des donn√©es pour la variable s√©lectionn√©e
                # Utiliser .copy() pour √©viter SettingWithCopyWarning si on modifie clean_quant_data plus tard
                clean_quant_data = df[selected_quant_col].dropna().copy()

                if len(clean_quant_data) > 0:
                    # Affichage des statistiques descriptives
                    # --- Sous-titre dynamique ---
                    st.subheader(f"Statistiques descriptives pour `{selected_quant_col}`")
                    col1_desc, col2_desc = st.columns(2) # Noms de colonnes uniques

                    with col1_desc:
                        stats_dict = {
                            "Moyenne": clean_quant_data.mean(),
                            "M√©diane": clean_quant_data.median(),
                            "√âcart-type (√âch.)": clean_quant_data.std(ddof=1), # Pr√©ciser √âchantillon
                            "Variance (√âch.)": clean_quant_data.var(ddof=1), # Pr√©ciser √âchantillon
                            "Minimum": clean_quant_data.min(),
                            "Maximum": clean_quant_data.max(),
                            "Effectif (non NA)": len(clean_quant_data) # Plus pr√©cis
                        }
                        stats_df = pd.DataFrame.from_dict(stats_dict, orient='index', columns=['Valeur'])
                        st.dataframe(stats_df.style.format("{:.4f}"))

                    with col2_desc:
                        fig_box, ax_box = plt.subplots() # Noms de fig/ax uniques
                        sns.boxplot(x=clean_quant_data, ax=ax_box, color='skyblue')
                        # --- Label dynamique d√©j√† pr√©sent ---
                        ax_box.set_xlabel(selected_quant_col)
                        ax_box.set_title(f'Box Plot de `{selected_quant_col}`') # Titre dynamique
                        st.pyplot(fig_box)

                    # Test de normalit√©
                    # --- Sous-titre dynamique ---
                    st.subheader(f"Test de normalit√© pour `{selected_quant_col}`")
                    test_type = st.radio("Type de test", ["Shapiro-Wilk", "Kolmogorov-Smirnov"],
                                         key=f"norm_test_type_{selected_quant_col}", horizontal=True) # Cl√© unique par variable

                    # Effectuer le test seulement si assez de donn√©es (>3 pour Shapiro)
                    p_value = np.nan # Initialiser
                    stat = np.nan
                    normality_test_done = False
                    if test_type == "Shapiro-Wilk" and len(clean_quant_data) >= 3:
                        stat, p_value = shapiro(clean_quant_data)
                        normality_test_done = True
                    elif test_type == "Kolmogorov-Smirnov" and len(clean_quant_data) > 0:
                         # K-S test contre une distribution normale avec moyenne/√©cart-type estim√©s
                        stat, p_value = kstest(clean_quant_data, 'norm',
                                               args=(clean_quant_data.mean(), clean_quant_data.std(ddof=1))) # Utiliser std √©chantillon
                        normality_test_done = True

                    if normality_test_done:
                        st.write(f"**Test:** {test_type}")
                        st.write(f"**Statistique:** {stat:.4f}")
                        st.write(f"**P-value:** {p_value:.4f}")
                        alpha_norm = 0.05 # Seuil alpha
                        if p_value > alpha_norm:
                             conclusion = f"‚úÖ Ne pas rejeter H0. La distribution de `{selected_quant_col}` pourrait √™tre normale (p > {alpha_norm})."
                        else:
                             conclusion = f"‚ùå Rejeter H0. La distribution de `{selected_quant_col}` n'est probablement pas normale (p <= {alpha_norm})."
                        st.write(f"**Conclusion (seuil {alpha_norm*100}%)**: {conclusion}")
                    else:
                        st.warning(f"Le test de normalit√© '{test_type}' n'a pas pu √™tre effectu√© (pas assez de donn√©es valides).")


                    # Graphiques de distribution
                    # --- Titres dynamiques ---
                    col1_dist, col2_dist = st.columns(2)
                    with col1_dist:
                        fig_hist, ax_hist = plt.subplots()
                        sns.histplot(clean_quant_data, kde=True, ax=ax_hist, color='skyblue')
                        # Ajouter la courbe normale th√©orique si moyenne/std sont valides
                        mean_val = clean_quant_data.mean()
                        std_val = clean_quant_data.std(ddof=1)
                        if pd.notna(mean_val) and pd.notna(std_val) and std_val > 0:
                            x_norm = np.linspace(clean_quant_data.min(), clean_quant_data.max(), 100)
                            ax_hist.plot(x_norm, norm.pdf(x_norm, mean_val, std_val), 'r--', label='Normale th√©orique')
                            ax_hist.legend()
                        ax_hist.set_title(f"Distribution de `{selected_quant_col}`")
                        st.pyplot(fig_hist)

                    with col2_dist:
                        fig_qq, ax_qq = plt.subplots()
                        # V√©rifier qu'il y a assez de donn√©es pour probplot
                        if len(clean_quant_data) > 1:
                            probplot(clean_quant_data, plot=ax_qq)
                            ax_qq.set_title(f"Q-Q Plot pour `{selected_quant_col}`")
                        else:
                            ax_qq.text(0.5, 0.5, "Pas assez de donn√©es pour le Q-Q plot", ha='center', va='center')
                            ax_qq.set_title(f"Q-Q Plot pour `{selected_quant_col}`")
                        st.pyplot(fig_qq)

                    # Estimation statistique
                    # --- Sous-titre dynamique ---
                    st.subheader(f"Estimation par Intervalle de Confiance pour `{selected_quant_col}`")

                    # D√©cision m√©thode bas√©e sur p-value valide
                    use_parametric = normality_test_done and p_value > alpha_norm

                    if use_parametric:
                        st.success(f"M√©thode param√©trique (bas√©e sur la loi de Student car `{selected_quant_col}` semble suivre une loi normale).")
                        n = len(clean_quant_data)
                        mean_val = clean_quant_data.mean()
                        std_err = stats.sem(clean_quant_data, nan_policy='omit') # Erreur standard de la moyenne

                        # IC Moyenne (Student)
                        if n > 1 and pd.notna(mean_val) and pd.notna(std_err) and std_err >= 0:
                             mean_ci = t.interval(0.95, df=n-1, loc=mean_val, scale=std_err)
                        else:
                             mean_ci = (np.nan, np.nan)

                        # IC Variance (Chi2)
                        var_val = clean_quant_data.var(ddof=1)
                        if n > 1 and pd.notna(var_val):
                            chi2_low_val = chi2.ppf(0.025, df=n-1)
                            chi2_high_val = chi2.ppf(0.975, df=n-1)
                            var_ci_low = (n-1)*var_val/chi2_high_val if chi2_high_val > 0 else 0
                            var_ci_upp = (n-1)*var_val/chi2_low_val if chi2_low_val > 0 else np.inf
                            var_ci = (var_ci_low, var_ci_upp)
                            # IC Ecart-type
                            sd_ci = (np.sqrt(var_ci[0]), np.sqrt(var_ci[1]))
                        else:
                            var_ci = (np.nan, np.nan)
                            sd_ci = (np.nan, np.nan)

                    else:
                        if not normality_test_done:
                            st.warning(f"M√©thode non-param√©trique (Bootstrap) utilis√©e car le test de normalit√© n'a pas pu √™tre effectu√©.")
                        else:
                            st.warning(f"M√©thode non-param√©trique (Bootstrap) utilis√©e car `{selected_quant_col}` ne semble pas suivre une loi normale (p <= {alpha_norm}).")

                        n_resamples = st.slider("Nombre de r√©plications bootstrap", 100, 10000, 1000,
                                                key=f"n_resamples_{selected_quant_col}") # Cl√© unique

                        # Calcul des IC Bootstrap
                        mean_ci = bootstrap_ci(clean_quant_data, np.mean, n_resamples)
                        # Utiliser ddof=1 pour la variance/std d'√©chantillon dans bootstrap
                        var_ci = bootstrap_ci(clean_quant_data, np.var, n_resamples)
                        sd_ci = bootstrap_ci(clean_quant_data, np.std, n_resamples)

                        # Visualisation bootstrap (Exemple √âcart-type)
                        # --- Titre dynamique ---
                        # Recalculer les √©chantillons bootstrap pour l'√©cart-type pour le graphique
                        if len(clean_quant_data) >= 2: # N√©cessaire pour std
                            bootstrap_samples_sd = [np.std(np.random.choice(clean_quant_data.to_numpy(),
                                                                           size=len(clean_quant_data),
                                                                           replace=True), ddof=1)
                                                   for _ in range(n_resamples)]

                            fig_boot, ax_boot = plt.subplots()
                            sns.histplot(bootstrap_samples_sd, kde=True, ax=ax_boot, color='lightcoral')
                            # Ajouter lignes pour IC si valide
                            if pd.notna(sd_ci[0]) and pd.notna(sd_ci[1]):
                                ax_boot.axvline(sd_ci[0], color='red', linestyle='--', label=f'IC 95% Inf ({sd_ci[0]:.3f})')
                                ax_boot.axvline(sd_ci[1], color='red', linestyle='--', label=f'IC 95% Sup ({sd_ci[1]:.3f})')
                                ax_boot.legend()
                            ax_boot.set_title(f"Distribution Bootstrap de l'√âcart-type (√âch.) pour `{selected_quant_col}`")
                            st.pyplot(fig_boot)
                        else:
                            st.info("Graphique Bootstrap non disponible (moins de 2 donn√©es valides).")


                    # Affichage des r√©sultats d'estimation
                    st.markdown("---") # S√©parateur visuel
                    st.write("**Estimations Ponctuelles et Intervalles de Confiance (95%)**")
                    col1_est, col2_est, col3_est = st.columns(3)

                    with col1_est:
                        st.metric(
                            "Moyenne",
                             # Afficher la valeur m√™me si l'IC est nan
                            value=f"{clean_quant_data.mean():.4f}" if pd.notna(clean_quant_data.mean()) else "N/A",
                            delta=f"IC: [{mean_ci[0]:.4f}, {mean_ci[1]:.4f}]" if pd.notna(mean_ci[0]) else "IC: N/A",
                            delta_color="off" # Pas de couleur pour l'IC
                        )

                    with col2_est:
                        st.metric(
                            "Variance (√âch.)",
                            value=f"{clean_quant_data.var(ddof=1):.4f}" if pd.notna(clean_quant_data.var(ddof=1)) else "N/A",
                            delta=f"IC: [{var_ci[0]:.4f}, {var_ci[1]:.4f}]" if pd.notna(var_ci[0]) else "IC: N/A",
                             delta_color="off"
                        )

                    with col3_est:
                        st.metric(
                            "√âcart-type (√âch.)",
                             value=f"{clean_quant_data.std(ddof=1):.4f}" if pd.notna(clean_quant_data.std(ddof=1)) else "N/A",
                            delta=f"IC: [{sd_ci[0]:.4f}, {sd_ci[1]:.4f}]" if pd.notna(sd_ci[0]) else "IC: N/A",
                             delta_color="off"
                        )
                else:
                    # S'affiche si la colonne s√©lectionn√©e n'a que des NA
                    st.warning(f"Aucune donn√©e valide (non-NA) trouv√©e pour la variable `{selected_quant_col}`.")

        with tab2:
            # Partie Variables Qualitatives
            # S√©lection de la variable qualitative
            qual_cols = df.select_dtypes(include=['object', 'category']).columns.tolist()
            low_card_numeric = [col for col in df.select_dtypes(include=np.number).columns
                                if df[col].nunique() < 15 and df[col].nunique() > 1]
            # Ajouter les num√©riques faible cardinalit√© √† la liste si pas d√©j√† pr√©sents
            qual_cols += [col for col in low_card_numeric if col not in qual_cols]

            if not qual_cols:
                 # Ce header s'affiche seulement s'il n'y a pas de var. qualitatives
                st.header("Analyse des Variables Qualitatives")
                st.warning("Aucune variable qualitative (ou num√©rique √† faible cardinalit√©) trouv√©e.")
            else:
                selected_qual_col = st.selectbox("S√©lectionnez la variable qualitative", qual_cols,
                                                 key="qual_var_select")

                # --- Header dynamique ---
                st.header(f"Analyse de la Variable Qualitative : `{selected_qual_col}`")

                if selected_qual_col in df.columns:
                    # Traiter comme cha√Æne pour l'analyse des modalit√©s, en gardant les NA pour le compte total initial
                    current_qual_data_with_na = df[selected_qual_col]
                    current_qual_data = current_qual_data_with_na.dropna().astype(str) # Convertir en str apr√®s dropna

                    # S√©lection de la modalit√©
                    modalities = sorted(current_qual_data.unique())
                    if not modalities:
                         st.warning(f"Aucune modalit√© trouv√©e pour `{selected_qual_col}` apr√®s suppression des NA.")
                    else:
                        selected_modality = st.selectbox(f"S√©lectionnez la modalit√© de `{selected_qual_col}` √† analyser",
                                                        modalities, key=f"modality_select_{selected_qual_col}") # Cl√© unique

                        # --- Sous-titre dynamique ---
                        st.subheader(f"Analyse de la Proportion pour la modalit√© `{selected_modality}` (Variable `{selected_qual_col}`)")


                        # Param√®tres d'analyse
                        conf_level_percent = st.slider("Niveau de confiance (%)", 90, 99, 95,
                                                key=f"conf_level_slider_{selected_qual_col}") # Cl√© unique
                        conf_level = conf_level_percent / 100.0

                        method_options = ['normal', 'agresti_coull', 'beta', 'wilson', 'jeffreys']
                        default_method_index = method_options.index('wilson')
                        method = st.selectbox("M√©thode d'intervalle de confiance (proportion)",
                                                method_options, index=default_method_index,
                                                key=f"ci_method_prop_{selected_qual_col}", # Cl√© unique
                                                help="M√©thodes de `statsmodels.stats.proportion.proportion_confint`. 'wilson' est souvent un bon choix.")


                        # Calcul des proportions bas√© sur les donn√©es NON-NA
                        total_count = len(current_qual_data) # Total des observations non-NA pour cette variable
                        modality_count = (current_qual_data == selected_modality).sum()

                        if total_count > 0:
                            proportion_val = modality_count / total_count
                            proportion_percent = proportion_val * 100

                            # Intervalle de confiance
                            try:
                                low, upp = proportion_confint(modality_count, total_count,
                                                            alpha=1-conf_level, method=method)
                                low_percent, upp_percent = low*100, upp*100
                            except Exception as e:
                                st.error(f"Erreur calcul IC: {e}")
                                low_percent, upp_percent = np.nan, np.nan

                            # Affichage des r√©sultats
                            col1_qual, col2_qual = st.columns([1, 2]) # Donner plus de place au graphique

                            with col1_qual:
                                 # --- Texte de la m√©trique dynamique ---
                                st.metric(
                                    f"Proportion de '{selected_modality}'",
                                    value=f"{proportion_percent:.2f}%",
                                    delta=f"({modality_count} / {total_count} non-NA)", # Pr√©ciser le total
                                    delta_color="off"
                                )
                                if not np.isnan(low_percent):
                                    st.write(f"**Intervalle de confiance √† {conf_level_percent:.0f}% ({method}):**")
                                    st.write(f"[{low_percent:.2f}%, {upp_percent:.2f}%]")
                                else:
                                     st.write(f"**Intervalle de confiance √† {conf_level_percent:.0f}% ({method}):** Calcul impossible.")

                                # T√©l√©chargement des r√©sultats (nom de fichier dynamique)
                                results = pd.DataFrame({
                                    'Variable': [selected_qual_col],
                                    'Modalit√© Analys√©e': [selected_modality],
                                    'Proportion (%)': [proportion_percent],
                                    'Effectif Modalit√©': [modality_count],
                                    'Effectif Total (non-NA)': [total_count],
                                    'M√©thode IC': [method],
                                    f'Borne Inf√©rieure IC ({conf_level_percent:.0f}%)': [low_percent],
                                    f'Borne Sup√©rieure IC ({conf_level_percent:.0f}%)': [upp_percent]
                                })

                                csv = results.to_csv(index=False).encode('utf-8')
                                st.download_button(
                                    label=f"T√©l√©charger r√©sultats pour '{selected_modality}'",
                                    data=csv,
                                    file_name=f'resultats_proportion_{selected_qual_col}_{selected_modality}.csv',
                                    mime='text/csv',
                                    key=f"download_prop_{selected_qual_col}_{selected_modality}" # Cl√© unique
                                )

                            with col2_qual:
                                # Graphique en camembert pour toutes les modalit√©s de la variable s√©lectionn√©e
                                # --- Titre dynamique ---
                                st.write(f"**R√©partition de toutes les modalit√©s pour `{selected_qual_col}`**")
                                # Calculer les proportions sur les donn√©es non-NA
                                all_proportions = current_qual_data.value_counts(normalize=True) * 100
                                if not all_proportions.empty:
                                    fig_pie = px.pie(
                                        values=all_proportions.values,
                                        names=all_proportions.index,
                                        # title=f"R√©partition de `{selected_qual_col}`", # Titre dans st.write au dessus
                                        color_discrete_sequence=px.colors.sequential.Viridis,
                                        hole=.3 # Petit trou au milieu pour un look "donut"
                                    )
                                    # Mettre en √©vidence la modalit√© s√©lectionn√©e
                                    pull_list = [0.2 if name == selected_modality else 0 for name in all_proportions.index]
                                    fig_pie.update_traces(textposition='inside', textinfo='percent+label', sort=False, pull=pull_list)
                                    fig_pie.update_layout(showlegend=False) # L√©gende redondante avec labels
                                    st.plotly_chart(fig_pie, use_container_width=True)
                                else:
                                     st.warning(f"Pas de donn√©es √† afficher dans le graphique pour `{selected_qual_col}`.")

                        else:
                            st.warning(f"Aucune donn√©e non nulle trouv√©e pour la variable `{selected_qual_col}` pour calculer les proportions.")

                        # Affichage des donn√©es brutes (optionnel, label dynamique)
                        if st.checkbox(f"Afficher les donn√©es brutes (non-NA) pour `{selected_qual_col}`", key=f"show_raw_data_{selected_qual_col}"): # Cl√© unique
                             st.dataframe(df[[selected_qual_col]].dropna())

                else:
                     # Ne devrait pas arriver si la s√©lection est bas√©e sur df.columns
                    st.error(f"Erreur interne: La variable `{selected_qual_col}` n'a pas √©t√© trouv√©e.")

    # Message si le chargement a √©chou√© apr√®s une tentative de t√©l√©versement
    elif uploaded_file is not None and df is None:
        st.error("Le chargement des donn√©es a √©chou√©. V√©rifiez le format ou le contenu du fichier.")

# Message si aucun fichier n'est encore t√©l√©vers√©
else:
    st.info("üëã Bienvenue ! Veuillez t√©l√©charger un fichier de donn√©es (CSV ou Excel) via la barre lat√©rale pour commencer l'analyse.")
    st.markdown("Cette application vous permet d'analyser des variables quantitatives (calcul de statistiques descriptives, tests de normalit√©, intervalles de confiance param√©triques ou bootstrap) et qualitatives (calcul de proportions avec intervalles de confiance).")